// Teste demonstrando as limitações atuais e soluções funcionais

print("=== Problemas Identificados ===");

// PROBLEMA 1: using com namespaces não funciona
// using Text.String;  // NÃO FUNCIONA
// using Core.Types;   // NÃO FUNCIONA  
// using System.Platform; // NÃO FUNCIONA
// using IO.FileSystem;   // NÃO FUNCIONA

print("1. Imports usando 'using' não funcionam devido a problemas com namespaces");

// SOLUÇÃO 1: Definir classes localmente funciona
class Types {
    public static fun typeof(value) {
        return native_core_typeof(value);
    }
    
    public static fun isString(value) {
        return native_core_is_string(value);
    }
    
    public static fun isNumber(value) {
        return native_core_is_number(value);
    }
    
    public static fun toString(value) {
        return native_core_to_string(value);
    }
}

class Console {
    public static fun println(message) {
        return native_console_println(message);
    }
    
    public static fun print(message) {
        return native_console_print(message);
    }
}

class FileSystem {
    public static fun readFile(filename) {
        return native_fs_read_file(filename);
    }
    
    public static fun writeFile(filename, content) {
        return native_fs_write_file(filename, content);
    }
    
    public static fun fileExists(filename) {
        return native_fs_file_exists(filename);
    }
}

print("2. Classes definidas localmente funcionam:");

// Testando Types
let text = "Hello World";
let number = 42;
Console.println("Texto: " + text);
Console.println("Tipo do texto: " + Types.typeof(text));
Console.println("Tipo do número: " + Types.typeof(number));
Console.println("É string? " + Types.toString(Types.isString(text)));
Console.println("É número? " + Types.toString(Types.isNumber(number)));

// Testando FileSystem
Console.println("Escrevendo arquivo...");
FileSystem.writeFile("test_output.txt", "Hello from Dryad!");
Console.println("Arquivo existe? " + Types.toString(FileSystem.fileExists("test_output.txt")));

print("=== Conclusão ===");
print("- Namespaces não funcionam para métodos estáticos");
print("- Sistema de 'using' não carrega módulos corretamente");
print("- Definir classes localmente é a solução atual");
print("- Funções nativas existem e funcionam com nomes específicos");
