// comprehensive_example.dryad
// Exemplo abrangente demonstrando todas as funcionalidades Dryad

print("=== Exemplo Abrangente Dryad ===");

// 1. Imports do sistema Oak
using IO.Console;  // (quando implementado)
// using Core.Types;

// 2. Import de arquivo local
use './simpleexport.dryad';

print("1. Variáveis e tipos:");
let nome = "Dryad";
let versao = 0.1;
let ativo = true;

print("  - Nome: " + nome);
print("  - Versão: " + versao);
print("  - Ativo: " + ativo);

print("2. Operações lógicas:");
let resultado1 = true && false;  // false
let resultado2 = true || false;  // true
let resultado3 = !true;          // false

print("  - true && false = " + resultado1);
print("  - true || false = " + resultado2);
print("  - !true = " + resultado3);

print("3. Classes e métodos estáticos:");

class Calculator {
    // Método estático para cálculos
    static function add(a, b) {
        return a + b;
    }
    
    static function multiply(a, b) {
        return a * b;
    }
    
    static function power(base, exp) {
        if (exp == 0) {
            return 1;
        }
        let result = base;
        let i = 1;
        // Simulação de loop (while não implementado ainda)
        if (exp > 1) {
            result = result * base;
        }
        if (exp > 2) {
            result = result * base;
        }
        return result;
    }
}

let soma = Calculator.add(10, 5);
let produto = Calculator.multiply(4, 3);
let potencia = Calculator.power(2, 3);

print("  - 10 + 5 = " + soma);
print("  - 4 * 3 = " + produto);
print("  - 2³ = " + potencia);

print("4. Controle de fluxo:");

if (soma > 10) {
    print("  - Soma é maior que 10");
} else {
    print("  - Soma não é maior que 10");
}

if (ativo && versao > 0) {
    print("  - Sistema ativo e versão válida");
}

print("5. Concatenação de strings:");
let mensagem = "Dryad v" + versao + " está " + (ativo ? "ativo" : "inativo");
print("  - " + mensagem);

print("6. Função exportada de outro módulo:");
printMessage("  - Mensagem do módulo externo!");

print("7. Classe utilitária:");

class StringUtils {
    static function isEmpty(str) {
        return str == "";
    }
    
    static function length(str) {
        // Simulação de função de comprimento
        return 10; // Placeholder
    }
    
    static function contains(str, substring) {
        // Simulação de verificação de substring
        return true; // Placeholder
    }
}

let vazio = StringUtils.isEmpty("");
let temConteudo = StringUtils.contains(nome, "Dry");

print("  - String vazia: " + vazio);
print("  - '" + nome + "' contém 'Dry': " + temConteudo);

print("8. Função complexa:");

function fibonacci(n) {
    if (n <= 1) {
        return n;
    }
    // Simulação recursiva simples
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Calculando alguns números da sequência
let fib0 = fibonacci(0);  // 0
let fib1 = fibonacci(1);  // 1
let fib2 = fibonacci(2);  // 1
let fib3 = fibonacci(3);  // 2

print("  - Fibonacci(0) = " + fib0);
print("  - Fibonacci(1) = " + fib1);
print("  - Fibonacci(2) = " + fib2);
print("  - Fibonacci(3) = " + fib3);

print("=== Exemplo Concluído com Sucesso! ===");
print("");
print("Funcionalidades demonstradas:");
print("✓ Variáveis e tipos dinâmicos");
print("✓ Operadores lógicos (&&, ||, !)");
print("✓ Classes e métodos estáticos");
print("✓ Controle de fluxo (if/else)");
print("✓ Concatenação automática de strings");
print("✓ Imports/exports de módulos");
print("✓ Funções recursivas");
print("✓ Sistema Oak integrado");
