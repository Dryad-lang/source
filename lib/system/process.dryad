// lib/system/process.dryad
// Módulo para execução de comandos externos e gerenciamento de processos

namespace System {
    export class Process {
        // Executar um comando e retornar o resultado
        public static fun execute(command) {
            return native_process_execute(command);
        }
        
        // Executar comando com argumentos separados
        public static fun executeWithArgs(command, args) {
            return native_process_execute_with_args(command, args);
        }
        
        // Executar comando em background (assíncrono)
        public static fun executeAsync(command) {
            return native_process_execute_async(command);
        }
        
        // Obter PID do processo atual
        public static fun getCurrentPid() {
            return native_process_get_current_pid();
        }
        
        // Matar um processo por PID
        public static fun kill(pid) {
            return native_process_kill(pid);
        }
        
        // Verificar se um processo está rodando
        public static fun isRunning(pid) {
            return native_process_is_running(pid);
        }
        
        // Obter código de saída do último comando
        public static fun getExitCode() {
            return native_process_get_exit_code();
        }
        
        // Aliases convenientes
        public static fun run(command) {
            return Process.execute(command);
        }
        
        public static fun runWithArgs(command, args) {
            return Process.executeWithArgs(command, args);
        }
        
        public static fun runAsync(command) {
            return Process.executeAsync(command);
        }
        
        public static fun getPid() {
            return Process.getCurrentPid();
        }
        
        public static fun terminate(pid) {
            return Process.kill(pid);
        }
        
        // Comandos específicos do sistema
        public static fun executeShell(command) {
            return native_process_execute_shell(command);
        }
        
        public static fun spawn(command, args) {
            return native_process_spawn(command, args);
        }
        
        // Capturar saída padrão e erro
        public static fun executeWithOutput(command) {
            return native_process_execute_with_output(command);
        }
    }
}
