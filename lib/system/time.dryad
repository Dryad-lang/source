// lib/system/time.dryad
// Módulo para operações de tempo, delays e timestamps

namespace System {
    export class Time {
        // Obter timestamp atual (Unix timestamp)
        public static fun now() {
            return native_time_now();
        }
        
        // Obter timestamp em milissegundos
        public static fun nowMillis() {
            return native_time_now_millis();
        }
        
        // Obter timestamp em nanossegundos (alta precisão)
        public static fun nowNanos() {
            return native_time_now_nanos();
        }
        
        // Pausar execução por X segundos
        public static fun sleep(seconds) {
            return native_time_sleep(seconds);
        }
        
        // Pausar execução por X milissegundos
        public static fun sleepMillis(milliseconds) {
            return native_time_sleep_millis(milliseconds);
        }
        
        // Pausar execução por X microssegundos
        public static fun sleepMicros(microseconds) {
            return native_time_sleep_micros(microseconds);
        }
        
        // Formatar timestamp para string legível
        public static fun format(timestamp, format) {
            return native_time_format(timestamp, format);
        }
        
        // Formatar timestamp atual
        public static fun formatNow(format) {
            return Time.format(Time.now(), format);
        }
        
        // Converter timestamp para estrutura de data
        public static fun toDate(timestamp) {
            return native_time_to_date(timestamp);
        }
        
        // Converter estrutura de data para timestamp
        public static fun fromDate(year, month, day, hour, minute, second) {
            return native_time_from_date(year, month, day, hour, minute, second);
        }
        
        // Aliases convenientes
        public static fun getCurrentTime() {
            return Time.now();
        }
        
        public static fun delay(seconds) {
            return Time.sleep(seconds);
        }
        
        public static fun wait(milliseconds) {
            return Time.sleepMillis(milliseconds);
        }
        
        public static fun pause(seconds) {
            return Time.sleep(seconds);
        }
        
        // Medição de performance
        public static fun startTimer() {
            return native_time_start_timer();
        }
        
        public static fun endTimer(timer_id) {
            return native_time_end_timer(timer_id);
        }
        
        public static fun elapsed(timer_id) {
            return native_time_elapsed(timer_id);
        }
        
        // Formatos de data comuns
        public static fun toISOString(timestamp) {
            return Time.format(timestamp, "ISO8601");
        }
        
        public static fun toDateString(timestamp) {
            return Time.format(timestamp, "YYYY-MM-DD");
        }
        
        public static fun toTimeString(timestamp) {
            return Time.format(timestamp, "HH:MM:SS");
        }
        
        public static fun toDateTimeString(timestamp) {
            return Time.format(timestamp, "YYYY-MM-DD HH:MM:SS");
        }
    }
}
