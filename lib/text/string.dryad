// lib/text/string.dryad
// Módulo de operações essenciais com strings

namespace Text {
    export class String {
        
        // ===== FUNÇÕES NATIVAS (quando necessárias) =====
        
        // Obter comprimento da string (necessita native para performance)
        public static fun length(str) {
            return native_string_length(str);
        }
        
        // Extrair substring por índices (necessita native para eficiência)
        public static fun slice(str, start, end) {
            if (end) {
                return native_string_slice(str, start, end);
            } else {
                return native_string_slice(str, start);
            }
        }
        
        // Dividir string por delimitador (necessita native para performance)
        public static fun split(str, delimiter) {
            if (delimiter) {
                return native_string_split(str, delimiter);
            } else {
                return native_string_split(str, " ");
            }
        }
        
        // Verificar se string contém substring (necessita native)
        public static fun contains(str, substring) {
            return native_string_contains(str, substring);
        }
        
        // Encontrar índice de substring (necessita native)
        public static fun indexOf(str, substring) {
            return native_string_indexof(str, substring);
        }
        
        // ===== FUNÇÕES EM DRYAD (quando possível) =====
        
        // Verificar se string está vazia
        public static fun isEmpty(str) {
            return String.length(str) == 0;
        }
        
        // Verificar se string não está vazia
        public static fun isNotEmpty(str) {
            return !String.isEmpty(str);
        }
        
        // Converter para maiúsculas (implementação em Dryad usando native básica)
        public static fun toUpperCase(str) {
            return native_string_to_upper(str);
        }
        
        // Converter para minúsculas (implementação em Dryad usando native básica)
        public static fun toLowerCase(str) {
            return native_string_to_lower(str);
        }
        
        // Remover espaços do início e fim
        public static fun trim(str) {
            return native_string_trim(str);
        }
        
        // Repetir string n vezes (implementação em Dryad)
        public static fun repeat(str, count) {
            if (count <= 0) {
                return "";
            }
            if (count == 1) {
                return str;
            }
            
            let result = "";
            let i = 0;
            // Usar laço while para repetir a string
            // (evitando recursão para evitar stack overflow)
            while (i < count) {
                result = result + str;
                i = i + 1;
            }
            
            return result;
        }
        
        // Preencher string à esquerda
        public static fun padLeft(str, targetLength, padChar) {
            let currentLength = String.length(str);
            if (currentLength >= targetLength) {
                return str;
            }
            
            let padding = padChar;
            if (!padding) {
                padding = " ";
            }
            
            let padCount = targetLength - currentLength;
            let padString = String.repeat(padding, padCount);
            return padString + str;
        }
        
        // Preencher string à direita
        public static fun padRight(str, targetLength, padChar) {
            let currentLength = String.length(str);
            if (currentLength >= targetLength) {
                return str;
            }
            
            let padding = padChar;
            if (!padding) {
                padding = " ";
            }
            
            let padCount = targetLength - currentLength;
            let padString = String.repeat(padding, padCount);
            return str + padString;
        }
        
        // Substituir primeira ocorrência
        public static fun replace(str, searchValue, replaceValue) {
            return native_string_replace(str, searchValue, replaceValue);
        }
        
        // Substituir todas as ocorrências
        public static fun replaceAll(str, searchValue, replaceValue) {
            return native_string_replace_all(str, searchValue, replaceValue);
        }
        
        // Verificar se string começa com prefix
        public static fun startsWith(str, prefix) {
            let prefixLength = String.length(prefix);
            let strStart = String.slice(str, 0, prefixLength);
            return strStart == prefix;
        }
        
        // Verificar se string termina com suffix
        public static fun endsWith(str, suffix) {
            let suffixLength = String.length(suffix);
            let strLength = String.length(str);
            let strEnd = String.slice(str, strLength - suffixLength, strLength);
            return strEnd == suffix;
        }
        
        // Capitalizar primeira letra
        public static fun capitalize(str) {
            if (String.isEmpty(str)) {
                return str;
            }
            
            let firstChar = String.slice(str, 0, 1);
            let restOfString = String.slice(str, 1);
            return String.toUpperCase(firstChar) + restOfString;
        }
        
        // Inverter string (implementação em Dryad usando native)
        public static fun reverse(str) {
            return native_string_reverse(str);
        }
        
        // Remover caracteres específicos
        public static fun remove(str, charToRemove) {
            return String.replaceAll(str, charToRemove, "");
        }
        
        // Contar ocorrências de substring
        public static fun count(str, substring) {
            if (String.isEmpty(str) || String.isEmpty(substring)) {
                return 0;
            }
            
            let parts = String.split(str, substring);
            let partsLength = native_array_length(parts);
            return partsLength - 1;
        }
        
        // Truncar string com ellipsis
        public static fun truncate(str, maxLength, ellipsis) {
            if (String.length(str) <= maxLength) {
                return str;
            }
            
            let suffix = ellipsis;
            if (!suffix) {
                suffix = "...";
            }
            
            let truncated = String.slice(str, 0, maxLength - String.length(suffix));
            return truncated + suffix;
        }
        
        // Verificar se string é alfanumérica
        public static fun isAlphanumeric(str) {
            return native_string_is_alphanumeric(str);
        }
        
        // Verificar se string é numérica
        public static fun isNumeric(str) {
            return native_string_is_numeric(str);
        }
        
        // Verificar se string é alfabética
        public static fun isAlpha(str) {
            return native_string_is_alpha(str);
        }
        
        // Escapar caracteres especiais para HTML
        public static fun escapeHtml(str) {
            let result = str;
            result = String.replaceAll(result, "&", "&amp;");
            result = String.replaceAll(result, "<", "&lt;");
            result = String.replaceAll(result, ">", "&gt;");
            result = String.replaceAll(result, "\"", "&quot;");
            result = String.replaceAll(result, "'", "&#39;");
            return result;
        }
        
        // Unescapar caracteres HTML
        public static fun unescapeHtml(str) {
            let result = str;
            result = String.replaceAll(result, "&lt;", "<");
            result = String.replaceAll(result, "&gt;", ">");
            result = String.replaceAll(result, "&quot;", "\"");
            result = String.replaceAll(result, "&#39;", "'");
            result = String.replaceAll(result, "&amp;", "&");
            return result;
        }
    }
}
