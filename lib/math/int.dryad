// lib/math/int.dryad
// Funções para números inteiros

namespace Math {
    export class Int {
        // Maior divisor comum
        public static fn gcd(a, b) {
            while (b != 0) {
                let temp = b;
                b = a % b;
                a = temp;
            }
            return a;
        }
        
        // Menor múltiplo comum
        public static fn lcm(a, b) {
            return (a * b) / Int.gcd(a, b);
        }
        
        // Verifica se um número é primo
        public static fn is_prime(n) {
            if (n <= 1) return false;
            if (n <= 3) return true;
            if (n % 2 == 0 || n % 3 == 0) return false;
            
            let i = 5;
            while (i * i <= n) {
                if (n % i == 0 || n % (i + 2) == 0) {
                    return false;
                }
                i = i + 6;
            }
            return true;
        }
        
        // Próximo número primo
        public static fn next_prime(n) {
            let candidate = n + 1;
            while (!Int.is_prime(candidate)) {
                candidate = candidate + 1;
            }
            return candidate;
        }
        
        // Fatorial de um número
        public static fn factorial(n) {
            if (n <= 1) {
                return 1;
            }
            return n * Int.factorial(n - 1);
        }
        
        // Verifica se um número é perfeito
        public static fn is_perfect(n) {
            if (n <= 1) return false;
            
            let sum = 1;
            let i = 2;
            while (i * i <= n) {
                if (n % i == 0) {
                    sum = sum + i;
                    if (i * i != n) {
                        sum = sum + (n / i);
                    }
                }
                i = i + 1;
            }
            return sum == n;
        }
        
        // Soma dos divisores
        public static fn sum_divisors(n) {
            let sum = 0;
            let i = 1;
            while (i <= n) {
                if (n % i == 0) {
                    sum = sum + i;
                }
                i = i + 1;
            }
            return sum;
        }
        
        // Verifica se um número é par
        public static fn is_even(n) {
            return n % 2 == 0;
        }
        
        // Verifica se um número é ímpar
        public static fn is_odd(n) {
            return n % 2 != 0;
        }
        
        // Sequência de Fibonacci
        public static fn fibonacci(n) {
            if (n <= 1) return n;
            
            let a = 0;
            let b = 1;
            let i = 2;
            
            while (i <= n) {
                let temp = a + b;
                a = b;
                b = temp;
                i = i + 1;
            }
            return b;
        }
        
        // Soma dos dígitos
        public static fn sum_digits(n) {
            let sum = 0;
            let num = n;
            if (num < 0) num = -num;
            
            while (num > 0) {
                sum = sum + (num % 10);
                num = num / 10;
            }
            return sum;
        }
    }
}
